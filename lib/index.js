// Generated by CoffeeScript 1.6.3
var Easymongo, client, connect, mongodb, objectId, prepare, utils;

utils = require('./utils');

mongodb = require('mongodb');

client = mongodb.MongoClient;

Easymongo = (function() {
  Easymongo.prototype.url = null;

  function Easymongo(server, options) {
    this.options = options != null ? options : {};
    if (!utils.is.obj(server) && !utils.is.str(server)) {
      throw new Error('Connection url to mongo must be specified');
    }
    if (utils.is.str(server)) {
      this.url = server;
    } else {
      if (!server.dbname) {
        throw new Error('The db name must be configured (server.dbname)');
      }
      if (!server.host) {
        server.host = '127.0.0.1';
      }
      if (!server.port) {
        server.port = '27017';
      }
      this.url = "mongodb://" + server.host + ":" + server.port + "/" + server.dbname;
    }
  }

  Easymongo.prototype.find = function(table, params, options, fn) {
    var _ref;
    _ref = utils.normalize(params, options, fn), params = _ref.params, options = _ref.options, fn = _ref.fn;
    connect(this, table, function(collection) {
      var cursor;
      cursor = collection.find(prepare(params));
      if (options) {
        if (options.limit) {
          cursor.limit(options.limit);
        }
        if (options.skip) {
          cursor.skip(options.skip);
        }
        if (options.sort) {
          cursor.sort(options.sort);
        }
      }
      cursor.toArray(function(error, results) {
        if (error) {
          results = [];
        }
        fn(error, results);
      });
    });
  };

  Easymongo.prototype.findById = function(table, id, fn) {
    fn = utils.normalize(fn).fn;
    this.find(table, {
      _id: id
    }, {
      limit: 1
    }, function(error, results) {
      var _ref;
      results = (_ref = results[0]) != null ? _ref : false;
      fn(error, results);
    });
  };

  Easymongo.prototype.save = function(table, params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    connect(this, table, function(collection) {
      params = prepare(params);
      collection.save(params, function(error, results) {
        if (error) {
          results = false;
        }
        if (results === 1) {
          results = params;
        }
        fn(error, results);
      });
    });
  };

  Easymongo.prototype.remove = function(table, params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    connect(this, table, function(collection) {
      params = prepare(params);
      collection.remove(params, function(error, results) {
        if (error) {
          results = false;
        }
        fn(error, results > 0);
      });
    });
  };

  Easymongo.prototype.removeById = function(table, id, fn) {
    this.remove(table, {
      _id: objectId(id)
    }, fn);
  };

  Easymongo.prototype.count = function(table, params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    connect(this, table, function(collection) {
      params = prepare(params);
      collection.count(params, function(error, results) {
        if (error) {
          results = false;
        }
        fn(error, parseInt(results, 10) || 0);
      });
    });
  };

  Easymongo.prototype.collection = function(table, fn) {
    fn = utils.normalize(fn).fn;
    connect(this, table, function(collection) {
      fn(collection);
    });
  };

  Easymongo.prototype.close = function() {
    if (!this.db) {
      return false;
    }
    this.db.close();
    this.db = null;
    return true;
  };

  return Easymongo;

})();

connect = function(self, table, fn) {
  var db;
  db = self.db;
  if (db && db.state && db.state === 'connected') {
    fn(db.collection(table));
  } else {
    client.connect(self.url, self.options, function(error, db) {
      if (error) {
        throw error;
      }
      self.db = db;
      fn(db.collection(table));
    });
  }
};

objectId = function(value) {
  if (utils.is.str(value)) {
    value = new mongodb.ObjectID(value);
  }
  return value;
};

prepare = function(params) {
  var operator;
  if (!params) {
    return null;
  }
  if (!params._id && !params.id) {
    return params;
  }
  if (!params._id && params.id) {
    params._id = params.id;
    delete params.id;
  }
  if (utils.is.obj(params._id)) {
    operator = false;
    if (utils.is.arr(params._id.$in)) {
      operator = '$in';
    }
    if (utils.is.arr(params._id.$nin)) {
      operator = '$nin';
    }
    if (operator) {
      params._id[operator] = params._id[operator].map(function(value) {
        return objectId(value);
      });
    }
  } else {
    params._id = objectId(params._id);
  }
  return params;
};

module.exports = Easymongo;
