// Generated by CoffeeScript 1.6.3
(function() {
  var Db, EasyMongo, Server, ensureObjectId, isFunction, isObject, mongodb, normalizeArguments;

  mongodb = require('mongodb');

  Db = mongodb.Db, Server = mongodb.Server;

  EasyMongo = (function() {
    EasyMongo.prototype.db = null;

    EasyMongo.prototype.collection = {};

    function EasyMongo(options) {
      this.options = options;
      if (this.options.host == null) {
        this.options.host = '127.0.0.1';
      }
      if (this.options.port == null) {
        this.options.port = 27017;
      }
    }

    EasyMongo.prototype.getInstance = function(table, after) {
      var instance, server,
        _this = this;
      if (this.options.db == null) {
        throw new Error('The database name must be configured (options.db)');
      }
      if (this.db !== null && this.db.state && this.db.state === 'connected') {
        return this.getCollection(table, after);
      } else {
        server = new Server(this.options.host, this.options.port, {
          auto_reconnect: true
        });
        instance = new Db(this.options.db, server, {
          safe: true
        });
        return instance.open(function(error, db) {
          if (error) {
            console.log("Error with connection to MongoDB server: " + error);
          }
          _this.db = db;
          return _this.getCollection(table, after);
        });
      }
    };

    EasyMongo.prototype.getCollection = function(table, after) {
      var _this = this;
      if (this.collection[table] != null) {
        return after(this.collection[table]);
      } else {
        return this.db.collection(table, function(error, collection) {
          if (error) {
            console.log("Error with fetching collection: " + error);
          }
          _this.collection[table] = collection;
          return after(collection);
        });
      }
    };

    EasyMongo.prototype.close = function() {
      if (this.db !== null) {
        if (this.collection !== {}) {
          this.collection = {};
        }
        this.db.close();
        return this.db = null;
      }
    };

    EasyMongo.prototype.find = function(table, params, options, after) {
      var exception, _ref,
        _this = this;
      _ref = normalizeArguments(params, options, after), params = _ref[0], options = _ref[1], after = _ref[2];
      try {
        if ((params != null ? params._id : void 0) != null) {
          if (isObject(params._id) && (params._id.$in != null)) {
            params._id.$in = params._id.$in.map(function(value) {
              return ensureObjectId(value);
            });
          } else {
            params._id = ensureObjectId(params._id);
          }
        }
      } catch (_error) {
        exception = _error;
        return after("Error with preparing params for find: " + exception, []);
      }
      return this.getInstance(table, function(collection) {
        var cursor;
        cursor = collection.find(params);
        if (options.sort) {
          cursor.sort(options.sort);
        }
        if (options.limit) {
          cursor.limit(options.limit);
        }
        if (options.skip) {
          cursor.skip(options.skip);
        }
        return cursor.toArray(function(error, results) {
          if (error) {
            return after("Error with fetching documents: " + error, []);
          }
          return after(null, results);
        });
      });
    };

    EasyMongo.prototype.save = function(table, params, after) {
      var exception,
        _this = this;
      if (after == null) {
        after = function() {};
      }
      try {
        if (params._id != null) {
          params._id = ensureObjectId(params._id);
        }
      } catch (_error) {
        exception = _error;
        return after("Error with preparing params for save: " + exception, false);
      }
      return this.getInstance(table, function(collection) {
        return collection.save(params, {
          safe: true
        }, function(error, results) {
          if (error) {
            return after("Error with saving data: " + error, false);
          }
          return after(null, results === 1 ? params : results);
        });
      });
    };

    EasyMongo.prototype.count = function(table, params, after) {
      var options, _ref,
        _this = this;
      _ref = normalizeArguments(params, after), params = _ref[0], options = _ref[1], after = _ref[2];
      return this.getInstance(table, function(collection) {
        return collection.count(params, function(error, results) {
          if (error) {
            return after("Error with fetching counts: " + error, false);
          }
          return after(null, parseInt(results, 10));
        });
      });
    };

    EasyMongo.prototype.findById = function(table, id, after) {
      var exception, params,
        _this = this;
      if (after == null) {
        after = function() {};
      }
      try {
        params = {
          _id: ensureObjectId(id)
        };
      } catch (_error) {
        exception = _error;
        return after("Error with preparing params for findById: " + exception, false);
      }
      return this.getInstance(table, function(collection) {
        return collection.find(params).toArray(function(error, results) {
          if (error) {
            return after("Error with fetching document by id: " + error, false);
          }
          return after(null, results && results.length === 1 ? results[0] : false);
        });
      });
    };

    EasyMongo.prototype.removeById = function(table, id, after) {
      var exception, params,
        _this = this;
      if (after == null) {
        after = function() {};
      }
      try {
        params = {
          _id: ensureObjectId(id)
        };
      } catch (_error) {
        exception = _error;
        return after("Error with preparing params for removeById: " + exception, false);
      }
      return this.getInstance(table, function(collection) {
        return collection.findAndRemove(params, function(error, results) {
          if (error) {
            return after("Error with removing document by id: " + error, false);
          }
          return after(null, results);
        });
      });
    };

    EasyMongo.prototype.Long = function(number) {
      return new mongodb.Long(number);
    };

    EasyMongo.prototype.ObjectID = function(hex) {
      return ensureObjectId(hex);
    };

    EasyMongo.prototype.Timestamp = function() {
      return new mongodb.Timestamp();
    };

    EasyMongo.prototype.DBRef = function(collection, id) {
      return new mongodb.DBRef(collection, id);
    };

    EasyMongo.prototype.Binary = function(buffer) {
      return new mongodb.Binary(buffer);
    };

    EasyMongo.prototype.Symbol = function(string) {
      return new mongodb.Symbol(string);
    };

    EasyMongo.prototype.MinKey = function() {
      return new mongodb.MinKey();
    };

    EasyMongo.prototype.MaxKey = function() {
      return new mongodb.MaxKey();
    };

    EasyMongo.prototype.Double = function(number) {
      return new mongodb.Double(number);
    };

    return EasyMongo;

  })();

  ensureObjectId = function(id) {
    if (typeof id === 'string') {
      return new mongodb.ObjectID(id);
    } else {
      return id;
    }
  };

  isFunction = function(obj) {
    return toString.call(obj) === '[object Function]';
  };

  isObject = function(obj) {
    return obj === Object(obj);
  };

  normalizeArguments = function(params, options, after) {
    if (isFunction(params)) {
      after = params;
      params = null;
      options = {};
    }
    if (isFunction(options)) {
      after = options;
      options = {};
    }
    if (!after) {
      after = (function() {});
    }
    if (!options) {
      options = {};
    }
    return [params, options, after];
  };

  module.exports = EasyMongo;

}).call(this);
