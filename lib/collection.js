// Generated by CoffeeScript 1.6.3
var Collection, mongodb, oid, prepare, utils;

utils = require('./utils');

mongodb = require('mongodb');

Collection = (function() {
  function Collection(db, name) {
    this.db = db;
    this.name = name;
  }

  Collection.prototype.oid = function(value) {
    return oid(value);
  };

  Collection.prototype.prepare = function(params) {
    return prepare(params);
  };

  Collection.prototype.find = function(params, options, fn) {
    var _ref;
    _ref = utils.normalize(params, options, fn), params = _ref.params, options = _ref.options, fn = _ref.fn;
    this.db.open(this.name, function(err, col) {
      var cursor;
      if (err) {
        fn(err, []);
        return;
      }
      cursor = col.find(prepare(params));
      if (options) {
        if (options.limit) {
          cursor.limit(options.limit);
        }
        if (options.skip) {
          cursor.skip(options.skip);
        }
        if (options.sort) {
          cursor.sort(options.sort);
        }
      }
      cursor.toArray(function(error, results) {
        if (error) {
          results = [];
        }
        fn(error, results);
      });
    });
  };

  Collection.prototype.findById = function(id, fn) {
    fn = utils.normalize(fn).fn;
    this.find({
      _id: id
    }, {
      limit: 1
    }, function(error, results) {
      var _ref;
      results = (_ref = results[0]) != null ? _ref : false;
      fn(error, results);
    });
  };

  Collection.prototype.save = function(params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    this.db.open(this.name, function(err, col) {
      if (err) {
        fn(err, []);
        return;
      }
      params = prepare(params);
      col.save(params, function(error, results) {
        if (error) {
          results = false;
        }
        if (results === 1) {
          results = params;
        }
        fn(error, results);
      });
    });
  };

  Collection.prototype.remove = function(params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    this.db.open(this.name, function(err, col) {
      if (err) {
        fn(err, []);
        return;
      }
      params = prepare(params);
      col.remove(params, function(error, results) {
        if (error) {
          results = false;
        }
        fn(error, results > 0);
      });
    });
  };

  Collection.prototype.removeById = function(id, fn) {
    this.remove({
      _id: id
    }, fn);
  };

  Collection.prototype.count = function(params, fn) {
    var _ref;
    _ref = utils.normalize(params, fn), params = _ref.params, fn = _ref.fn;
    this.db.open(this.name, function(err, col) {
      if (err) {
        fn(err, []);
        return;
      }
      params = prepare(params);
      col.count(params, function(error, results) {
        if (error) {
          results = false;
        }
        fn(error, parseInt(results, 10) || 0);
      });
    });
  };

  return Collection;

})();

oid = function(value) {
  if (!value) {
    return new mongodb.ObjectID();
  }
  if (utils.is.str(value)) {
    value = new mongodb.ObjectID(value);
  }
  return value;
};

prepare = function(params) {
  var operator;
  if (!params) {
    return null;
  }
  if (!params._id && !params.id) {
    return params;
  }
  if (!params._id && params.id) {
    params._id = params.id;
    delete params.id;
  }
  if (utils.is.obj(params._id)) {
    operator = false;
    if (utils.is.arr(params._id.$in)) {
      operator = '$in';
    }
    if (utils.is.arr(params._id.$nin)) {
      operator = '$nin';
    }
    if (operator) {
      params._id[operator] = params._id[operator].map(function(value) {
        return oid(value);
      });
    }
  } else {
    params._id = oid(params._id);
  }
  return params;
};

module.exports = Collection;
